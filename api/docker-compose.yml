version: '3.7'

networks:
  network_reservation_management:
    name: network_reservation_management

services:

  reservation-management-api:
    container_name: reservation-management-api
    build:
      context: .
      dockerfile: ./Dockerfile
      target: development
    restart: unless-stopped
    command: npm run start
    env_file: .env
    environment:
      DEVELOPMENT: 'true'
      DOCKER_BUILDKIT: 0
    volumes:
      - .:/app
      - /app/node_modules
      - ./public:/app/public
    ports:
      - '8000:8000'
    networks:
      - network_reservation_management
    depends_on:
      - mongo

  mongo:
    image: mongo:3.6.10
    container_name: reservation-management-mongo
    networks:
      - network_reservation_management
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
      - MONGO_INITDB_ROOT_USERNAME=${DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./.files/dbdata:/data/db
      - ./.files/dbdata:/data/configdb
    ports:
      - '27010:27017'
    command: mongod --smallfiles --logpath=/dev/stdout
    restart: unless-stopped
    tty: true

  nginx:
    image: nginx:stable
    container_name: reservation-management-nginx
    ports:
      - 80:80
      - 443:443
    networks:
      - network_reservation_management
    volumes:
      - ./public:/var/www/html/public
      #- ./phpdocker/nginx/default.conf:/etc/nginx/sites-available/default.conf
      - ./phpdocker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      #- ./phpdocker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf

    restart: unless-stopped
    depends_on:
      - reservation-management-api
